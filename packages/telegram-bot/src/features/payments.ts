import { connectorsApi } from '@/api/connectorsApi'
import { payApi } from '@/api/payApi'
import type { MyContext } from '@/bot'
import { HTTPError } from 'got'
import { Composer, InlineKeyboard } from 'grammy'

export const payments = new Composer<MyContext>()

payments.callbackQuery('payments:test', async ctx => {
	await ctx.answerCallbackQuery()
	const projectId = ctx.session.projectId
	if (!projectId) return

	const connectors = await connectorsApi.getConnectors({ projectId, active: true })
	if (!connectors.length) {
		return ctx.reply('üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤')
	}

	let text = 'üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–≤:\n\n'
	connectors.forEach(c => {
		text += `‚Ä¢ ${c.name} ‚Äî ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ\n`
	})

	const sent = await ctx.reply(text, {
		reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'noop'),
	})

	for (const connector of connectors) {
		text = text.replace(
			`‚Ä¢ ${connector.name} ‚Äî ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ`,
			`‚Ä¢ ${connector.name} ‚Äî üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞‚Ä¶`
		)
		await ctx.api.editMessageText(ctx.chat!.id, sent.message_id, text, {
			reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'noop'),
			parse_mode: 'HTML',
		})

		try {
			const payment = await payApi.pay({
				amount: 100,
				description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂',
				projectId,
				connectorId: connector.id,
			})

			text = text.replace(
				`‚Ä¢ ${connector.name} ‚Äî üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞‚Ä¶`,
				`‚Ä¢ ${connector.name} ‚Äî ‚úÖ –ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω \n(ID: <b>${payment.id}</b>)\n`
			)
		} catch (err) {
			let error = ''

			if (err instanceof HTTPError && err.response.body?.error)
				error = err.response.body?.error

			text = text.replace(
				`‚Ä¢ ${connector.name} ‚Äî üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞‚Ä¶`,
				`‚Ä¢ ${connector.name} ‚Äî ‚ùå –û—à–∏–±–∫–∞\n${error}\n`
			)
		}

		await ctx.api.editMessageText(ctx.chat!.id, sent.message_id, text, {
			reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'noop'),
			parse_mode: 'HTML',
		})
	}
})
