import { methodsApi } from '@/api/methodsApi'
import { providersApi } from '@/api/providersApi'
import { InlineKeyboard } from 'grammy'
import z from 'zod'

export async function viewMethod(connectorId: number) {
	const method = await methodsApi.getMethod(connectorId)

	const kb = new InlineKeyboard()
	const lines: string[] = []

	const provider = method.byProvider
		? await providersApi.getProvider(method.byProvider)
		: null

	lines.push(`üåê –ù–∞–∑–≤–∞–Ω–∏–µ: <b>${method.label || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</b> (ID: ${method.id})`)
	lines.push(' ')

	const stateText = method.active ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : '‚≠ï –í—ã–∫–ª—é—á–µ–Ω'
	lines.push(`–°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>${stateText}</b>`)

	const toggleText = method.active ? '‚èª –í—ã–∫–ª—é—á–∏—Ç—å' : '‚èª –í–∫–ª—é—á–∏—Ç—å'
	kb.text(toggleText, `method:${method.active ? 'stop' : 'active'}`).row()

	kb.text(
		`${method.showLabel ? '‚úÖ –ò–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è' : '‚ùå –ò–º—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è'}`,
		`method:configure:showLabel:${method.showLabel ? 'false' : 'true'}`
	)

	kb.row()

	if (method.imageSrc && z.string().url().safeParse(method.imageSrc).success) {
		kb.url('üèûÔ∏è –ò–∫–æ–Ω–∫–∞', method.imageSrc).row()
	}

	kb.text(
		`üåê –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${method?.connector?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω'}`,
		`method:configure:connector`
	)
	kb.row()

	if (!method.connector) {
		kb.text(`üîó –®–ª—é–∑: ${provider?.title || '–ù–µ –≤—ã–±—Ä–∞–Ω'}`, `method:configure:provider`)
		kb.row()
		kb.text(`üß© –ú–µ—Ç–æ–¥: ${method.method || '–ù–µ –≤—ã–±—Ä–∞–Ω'}`, `method:configure:methods`)
		kb.row()
	}

	kb.text(`‚ûñ –û—Ç ${method.minAmount || ' - '}‚ÇΩ`, `method:configure:minAmount`)
	kb.text(`‚ûï –î–æ ${method.maxAmount || ' - '}‚ÇΩ`, `method:configure:maxAmount`)
	kb.row()
	kb.text('‚õî –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥', `method:delete`)
	kb.row().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `methods`)

	return {
		message: lines.join('\n'),
		kb,
	}
}
