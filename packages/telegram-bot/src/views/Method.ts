import { methodsApi } from '@/api/methodsApi'
import type { MethodDTO } from '@hfam/shared/dto/index'
import { InlineKeyboard } from 'grammy'

export async function viewMethod(methodId: MethodDTO['id']) {
	const method = await methodsApi.getMethod(methodId)

	const connector = method.connector
		? `${method.connector.name} (ID: ${method.connectorId})`
		: null

	const lines: string[] = []

	lines.push(`üìÅ <b>${method.project.name}</b> (ID: ${method.projectId})`)
	lines.push('')
	const stateText = method.active ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : '‚≠ï –í—ã–∫–ª—é—á–µ–Ω'
	lines.push(`–°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>${stateText}</b>`)
	lines.push('')

	if (connector) {
		lines.push(`<b>üåê –ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> ${connector}`)
	} else {
		lines.push(
			`ü§ñ <b>(–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∑–∞–¥–∞–Ω) SmartPay:</b>\n\n` +
				`‚Äî –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º: <b><i>${method.byProvider ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'}</i></b>\n` +
				`‚Äî –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Ç–æ–¥—É: <b><i>${method.method ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'}</i></b>`
		)
	}
	lines.push('')
	const toggleText = method.active ? '‚èª –í—ã–∫–ª—é—á–∏—Ç—å' : '‚èª –í–∫–ª—é—á–∏—Ç—å'
	const kb = new InlineKeyboard()
	kb.text(toggleText, `method:${method.active ? 'stop' : 'active'}`)
		.row()
		.row()
		.text('üìä –õ–∏–º–∏—Ç—ã', `method_limits_${method.id}`)
		.text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å', `method_smartpay_${method.id}`)
		.row()
		.text('‚õî  –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥', `method_delete_${method.id}`)
		.row()
		.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `methods`)

	return { message: lines.join('\n'), kb }
}
