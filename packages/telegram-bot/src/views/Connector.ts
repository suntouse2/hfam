import { connectorsApi } from '@/api/connectorsApi'
import { projectsApi } from '@/api/projectsApi'
import { providersApi } from '@/api/providersApi'
import { connectorSchemaSchema } from '@hfam/shared/validation/connectors'
import { InlineKeyboard } from 'grammy'

export async function viewConnector(connectorId: number) {
	const connector = await connectorsApi.getConnector(connectorId)

	const { project } = connector
	const provider = await providersApi.getProvider(connector.byProvider)
	const kb = new InlineKeyboard()
	const lines: string[] = []

	lines.push(`üìÅ <b>${project.name}</b> (ID: ${project.id})`)
	lines.push(``)
	lines.push(`üåê –ù–∞–∑–≤–∞–Ω–∏–µ: <b>${connector.name}</b> (ID: ${connector.id})`)
	lines.push(`üåê –ü—Ä–æ–≤–∞–π–¥–µ—Ä: <b>${provider.title}</b> `)
	lines.push(``)

	const schema = connectorSchemaSchema.parse(connector.schema)

	if (Object.values(schema).some(s => !s.value)) {
		lines.push('–ß—Ç–æ–±—ã <b>–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä</b>, —Å–ø–µ—Ä–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ –∫–ª—é—á–∏ üîë')
	} else {
		const stateText = connector.active ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : '‚≠ï –í—ã–∫–ª—é—á–µ–Ω'
		lines.push(`–°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>${stateText}</b>`)
		const toggleText = connector.active ? '‚èª –í—ã–∫–ª—é—á–∏—Ç—å' : '‚èª –í–∫–ª—é—á–∏—Ç—å'
		kb.text(toggleText, `connector:${connector.active ? 'stop' : 'active'}`).row()
	}

	Object.entries(schema).forEach(([key, { label, value }]) => {
		kb.text(`üîë ${label}: ${value ?? '–ù–ï –£–ö–ê–ó–ê–ù'}`, `connector:key-${key}`).row()
	})

	kb.text('üîó –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–±—ç–∫-—Å—Å—ã–ª–∫—É', `connector:callback`).row(),
		kb.text('‚õî –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä', `connector:delete`)
	kb.row().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `connectors`)

	return {
		message: lines.join('\n'),
		kb,
	}
}
