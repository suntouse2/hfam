import { InlineKeyboard } from 'grammy'
import { projectsService } from '@/services/projectsService'
import { connectorService } from '@/services/connectorsService'

export async function renderConnector(connectorId: number) {
	const connector = await connectorService.getConnector(connectorId)

	if (!connector) return { message: 'üíÄ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.', kb: new InlineKeyboard() }

	const { project, provider } = connector
	const kb = new InlineKeyboard()
	const lines: string[] = []

	lines.push(`üìÅ <b>${project.name}</b> (ID: ${project.id})`)
	lines.push(`üåê –ü—Ä–æ–≤–∞–π–¥–µ—Ä: <b>${provider.title}</b>`)
	lines.push(``)

	if (connector.credentials.some(c => !c.value)) {
		lines.push('–ß—Ç–æ–±—ã <b>–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä</b>, —Å–ø–µ—Ä–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ –∫–ª—é—á–∏ üîë')
	} else {
		const stateText = connector.active ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : '‚≠ï –í—ã–∫–ª—é—á–µ–Ω'
		lines.push(`–°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>${stateText}</b>`)
		const toggleText = connector.active ? '‚èª –í—ã–∫–ª—é—á–∏—Ç—å' : '‚èª –í–∫–ª—é—á–∏—Ç—å'
		kb.text(toggleText, `connectorsSwitch_${connector.id}`).row()
	}

	connector.credentials.forEach(c => {
		kb.text(
			`üîë ${c.label}: ${c.value ?? '–ù–ï –£–ö–ê–ó–ê–ù'}`,
			`editConnectorCreds_${c.id}`
		).row()
	})
	kb.text('üîó –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–ª–±—ç–∫-—Å—Å—ã–ª–∫—É', `connectorsGetCallback_${connector.id}`).row(),
		kb.text('‚õî –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä', `connectorsDelete_${connector.id}`)
	kb.row().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `connectors_${project.id}`)

	return {
		message: lines.join('\n'),
		kb,
	}
}
