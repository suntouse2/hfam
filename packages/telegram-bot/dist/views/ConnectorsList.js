import { connectorsApi } from "../api/connectorsApi.js";
import { projectsApi } from "../api/projectsApi.js";
import { connectorSchemaSchema } from "@hfam/shared/validation/connectors";
import { InlineKeyboard } from "grammy";
export async function viewConnectorsList(projectId) {
    const connectors = await connectorsApi.getConnectors({
        projectId: projectId ?? undefined
    });
    let project;
    if (projectId) project = await projectsApi.getProject(projectId);
    const lines = [
        project && `üìÅ <b>${project.name}</b> (ID: ${project.id})`,
        ``,
        `üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:`
    ];
    const kb = new InlineKeyboard();
    connectors.forEach((c)=>{
        const state = c.active ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : '‚≠ï –í—ã–∫–ª—é—á–µ–Ω';
        const scheme = connectorSchemaSchema.parse(c.schema);
        const notConfigured = Object.values(scheme).some((s)=>!s.value);
        const label = notConfigured ? `${c.name}  (ID: ${c.id}) ‚îÉ ‚öôÔ∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω` : `${c.name}  (ID: ${c.id}) ‚îÉ ${state}`;
        kb.text(label, `connector:id-${c.id}`).row();
    });
    kb.text('‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä ', `providers`).row();
    kb.text('üß™ –¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞', `payments:test`).row();
    kb.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', project ? `project:id-${projectId}` : `projects`);
    return {
        message: lines.join('\n'),
        kb
    };
}
