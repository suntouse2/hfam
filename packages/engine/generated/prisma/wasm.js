
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  tgSupportId: 'tgSupportId',
  supportLink: 'supportLink'
};

exports.Prisma.MethodScalarFieldEnum = {
  id: 'id',
  label: 'label',
  imageSrc: 'imageSrc',
  active: 'active',
  method: 'method',
  byProvider: 'byProvider',
  connectorId: 'connectorId',
  projectId: 'projectId',
  minAmount: 'minAmount',
  maxAmount: 'maxAmount',
  showLabel: 'showLabel',
  position: 'position'
};

exports.Prisma.DomainScalarFieldEnum = {
  id: 'id',
  value: 'value',
  projectId: 'projectId'
};

exports.Prisma.ConnectorScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  schema: 'schema',
  settings: 'settings',
  active: 'active',
  byProvider: 'byProvider',
  bIndex: 'bIndex'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  status: 'status',
  amount: 'amount',
  description: 'description',
  hookWait: 'hookWait',
  payload: 'payload',
  paymentId: 'paymentId',
  paymentUrl: 'paymentUrl',
  paymentQr: 'paymentQr',
  projectId: 'projectId',
  connector: 'connector',
  method: 'method',
  domain: 'domain',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  CREATED: 'CREATED',
  PAID: 'PAID',
  REFUND: 'REFUND'
};

exports.Prisma.ModelName = {
  Project: 'Project',
  Method: 'Method',
  Domain: 'Domain',
  Connector: 'Connector',
  Payment: 'Payment'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\touse2\\hfam\\packages\\engine\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\touse2\\hfam\\packages\\engine\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Project {\n  id          Int         @id @default(autoincrement())\n  name        String\n  tgSupportId String      @default(\"\")\n  supportLink String      @default(\"\")\n  domains     Domain[]\n  payments    Payment[]\n  connectors  Connector[]\n  methods     Method[]\n\n  @@map(\"projects\")\n}\n\nmodel Method {\n  id          Int        @id @default(autoincrement())\n  label       String\n  imageSrc    String?\n  active      Boolean    @default(false)\n  method      String?\n  byProvider  String?\n  connector   Connector? @relation(fields: [connectorId], references: [id], onDelete: SetNull)\n  connectorId Int?\n  project     Project    @relation(fields: [projectId], references: [id])\n  projectId   Int\n  minAmount   Int?\n  maxAmount   Int?\n  showLabel   Boolean    @default(true)\n  position    Int        @default(0)\n\n  @@map(\"methods\")\n}\n\nmodel Domain {\n  id        Int     @id @default(autoincrement())\n  value     String\n  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  projectId Int\n\n  @@map(\"domains\")\n}\n\nmodel Connector {\n  id         Int      @id @default(autoincrement())\n  projectId  Int\n  name       String   @default(\"\")\n  schema     Json\n  settings   Json?\n  active     Boolean  @default(false)\n  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  byProvider String\n  bIndex     Int      @default(0)\n  methods    Method[]\n\n  @@map(\"connectors\")\n}\n\nmodel Payment {\n  id          String        @id @default(uuid())\n  orderId     String\n  status      PaymentStatus @default(CREATED)\n  amount      Int\n  description String        @default(\"\")\n  hookWait    Boolean       @default(false)\n  payload     Json?\n  paymentId   String?       @unique\n  paymentUrl  String?\n  paymentQr   String?\n  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  projectId   Int\n  connector   Json\n  method      String?\n  domain      String        @default(\"\")\n  createdAt   DateTime      @default(now())\n  updatedAt   DateTime      @updatedAt\n\n  @@map(\"payments\")\n}\n\nenum PaymentStatus {\n  CREATED\n  PAID\n  REFUND\n}\n",
  "inlineSchemaHash": "26b5e752341bee944341b44d0ecbee84db87b4498f27837187eab2c2382262b5",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Project\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tgSupportId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supportLink\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"domains\",\"kind\":\"object\",\"type\":\"Domain\",\"relationName\":\"DomainToProject\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToProject\"},{\"name\":\"connectors\",\"kind\":\"object\",\"type\":\"Connector\",\"relationName\":\"ConnectorToProject\"},{\"name\":\"methods\",\"kind\":\"object\",\"type\":\"Method\",\"relationName\":\"MethodToProject\"}],\"dbName\":\"projects\"},\"Method\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageSrc\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"method\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"byProvider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"connector\",\"kind\":\"object\",\"type\":\"Connector\",\"relationName\":\"ConnectorToMethod\"},{\"name\":\"connectorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"MethodToProject\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"minAmount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxAmount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"showLabel\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":\"methods\"},\"Domain\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"DomainToProject\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":\"domains\"},\"Connector\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schema\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"settings\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ConnectorToProject\"},{\"name\":\"byProvider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"methods\",\"kind\":\"object\",\"type\":\"Method\",\"relationName\":\"ConnectorToMethod\"}],\"dbName\":\"connectors\"},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hookWait\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"payload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paymentUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paymentQr\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"PaymentToProject\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"connector\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"method\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"domain\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"payments\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

